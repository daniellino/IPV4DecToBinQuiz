{"version":3,"sources":["main.js"],"names":["window","binarArr","noLeadBinary","addLeadinZero","resetWholeGeneration","location","reload","result","decimVal","leadingZero","floor","Math","random","clickedObjectContainer","binaryWithLeadingZero","getElementById","deimalVlaue","innerHTML","dec","toString","console","randBinar","i","substr","length","randBinaryGenerator","log","dec2bin","push","style","display","testForHidingRow","tablRowCount","document","querySelector","rows","makeItHidden","Indx","populatGivenAns","myChosenAnswers","givenAns","shuffleArray","j","temp","newArray","runToCheck","resultAns","body","backgroundColor","color","concat","innerText","undefined","myFunctionFalse","cmbAnsFieldContent","myFunctionCorrect","q","indexStr"],"mappings":"aAAA,IACIA,OAGAC,cAIAC,aADAC,sBAPEC,qBAAuB,WACzBJ,OAAOK,SAASC,UADpBL,SAAA,GAGIM,SAAJ,EAGIC,YAAJ,GAGAA,SAAIC,KAAWC,MAAf,IAAAC,KAAAC,UACA,IA8BIC,uBA9BAC,YAAAA,SAAJC,eAAA,iBAIAC,SAAAA,QAAYC,GACZ,OAAAC,EAAAC,SAAA,GAKAjB,SAAAA,sBAEAkB,IAII,IAAIC,EAJInB,EAAAA,EAAAA,EAAZ,EAAAoB,IACQD,EAAMnB,KAAAA,MAAd,IAAAS,KAAAC,UAAAO,SAAA,GAMQE,EAAY,WAAWE,OAAOF,EAAUG,QAAUH,EAJ1DpB,SAASwB,KAAAA,GACDJ,QAAJK,IAAAL,GAdJb,YAAWG,UAAWA,SAItBT,aAASyB,QAAanB,UAClBN,aAAaiB,WAAbI,OAAArB,aAAAsB,QAAAtB,aAKJkB,QAAQM,IAAIxB,cACZD,SAAS2B,KAAK1B,cAMNmB,sBAIHD,QAAAM,IAAAzB,UAELwB,IAAAA,gBAAmB,GAGnBL,SAAYnB,SAAZc,eAAA,WAEA,SAAIF,eAOAA,uBAAuBgB,MAAMC,QAAU,OAH3C,SAAAC,mBAOI,IAAIC,EAAeC,SAASC,cAAc,iBAAiBC,KAAKX,OANpEJ,QAASgB,IAAAA,GACL,IAAA,IAAAC,EAAA,EAAAA,EAAAL,EAAA,EAAAK,IAW2B,QAT7BJ,SAAAC,cAQc,8BAAgCG,EAAO,uBACzCR,MAAMC,SALhB,QAFKC,SAAAA,cACDC,8BAAsCK,EAAA,uBAC9BL,MAAAA,UACHK,SAAUA,cAEH,8BACJA,EAAA,KAMIR,MAACK,QACL,QAIf,SAACI,kBAGyB,IAAnBC,kBACAA,gBAAkB1B,uBAAuBqB,cAAc,OAAOjB,WADlEuB,SAAID,UAAmBA,gBAe3B,SAASE,aAAaxC,GAAtB,IAASwC,IAAAA,EAAAA,EAAaxC,OAAU,EAAA,EAAAqB,EAAAA,IAAA,CACvB,IAAKoB,EAAGzC,KAAAA,MAASuB,KAATZ,UAA6BU,EAAI,IAClCX,EAAKD,EAAWE,GACpB+B,EAAO1C,GAAAA,EAAXyC,GACAzC,EAAAyC,GAAczC,EAEjB,OAAAA,EACD,IAAA2C,SAAO3C,aAAPA,UAaJ,SAAS4C,aAAT,IAAAC,EAAAb,SAAsBlB,eAAA,cAMdkB,SAASc,IACTP,EAAAvB,UAAuB,SACzBgB,SAAAc,KAAAlB,MAAAmB,gBAAA,UACFF,EAAAjB,MAAAoB,MAAA,UAOQT,SAASvB,UADU,IAAnBsB,gBACA,sBAAAW,OAA2ChD,aAA3C,qCALJ,sBAAAgD,OAAAhD,aAAA,gBAAAgD,OAAAX,gBAAA,KAGAO,IAAAA,EAAwBN,SAAxBW,UAS0BC,MAA1BvC,wBARI0B,GAAuBrC,cAb/B4C,EAAA7B,UAAA,WACI6B,SAASC,KAAGd,MAASlB,gBAAe,UAIpCyB,SAASX,MAAMoB,MAAQ,WAwBvBI,IAPA,IAAA,IAAIC,EAAAA,EAAAA,EAAAA,SAAkB9B,OAAItB,IAA1B,CACIqD,IAAAA,SAAAA,OAAiBC,EAAA,GAEjBH,SAAAA,YAAeI,SAJvBxB,SAOOlB,eAAA0C,UAAAxC,UAAA2B,SAAAY","file":"main.min.js","sourcesContent":["const resetWholeGeneration = () => {\r\n    window.location.reload();\r\n}\r\nlet result;\r\nlet binarArr = [];\r\n// let final = \"\";\r\nlet decimVal = 0;\r\nlet addLeadinZero;\r\nlet noLeadBinary;\r\nlet leadingZero = \"\";\r\nlet binaryWithLeadingZero;\r\n\r\ndecimVal = Math.floor(Math.random() * 256);\r\nlet deimalVlaue = document.getElementById(\"decimal-Value\");\r\ndeimalVlaue.innerHTML = decimVal;\r\n/********************************************************************************** */\r\nfunction dec2bin(dec) {\r\n    return (dec).toString(2);\r\n}//doesnt show leadin zeros\r\nnoLeadBinary = dec2bin(decimVal);\r\nnoLeadBinary = \"00000000\".substr(noLeadBinary.length) + noLeadBinary;\r\n// console.log('the length is', noLeadBinary.length);\r\nconsole.log(noLeadBinary);\r\nbinarArr.push(noLeadBinary);\r\n\r\nfunction randBinaryGenerator() {\r\n    let randBinar;\r\n    for (let i = 0; i < 5; i++) {\r\n        randBinar = Math.floor(Math.random() * 256).toString(2);\r\n        randBinar = \"00000000\".substr(randBinar.length) + randBinar;\r\n        binarArr.push(randBinar);\r\n        console.log(randBinar);\r\n\r\n    }\r\n}\r\nrandBinaryGenerator();\r\n\r\n\r\nconsole.log(binarArr);\r\n/******************************************************************************************************************************************** */\r\nlet clickedObjectContainer;\r\nlet myChosenAnswers = ''; //variable for keeping concatenated words\r\nlet givenAns = document.getElementById('combAns');\r\n//~~~~~~~~~~~~~~~~~asked question loop~~~~~~~~~~~~~~~~\r\n/*//////////FUNCTIONS/////////*/\r\nfunction makeItHidden() {\r\n    //function for hidding the clicked cell table row\r\n    clickedObjectContainer.style.display = 'none';\r\n} //hiding\r\n\r\nfunction testForHidingRow() {\r\n    let tablRowCount = document.querySelector('.answersTable').rows.length;\r\n    console.log(tablRowCount);\r\n    for (var Indx = 1; Indx < tablRowCount + 1; Indx++) {\r\n        if (\r\n            document.querySelector(\r\n                '.answersTable tr:nth-child(' + Indx + ') td:nth-child(2)>a'\r\n            ).style.display == 'none' &&\r\n            document.querySelector(\r\n                '.answersTable tr:nth-child(' + Indx + ') td:nth-child(3)>a'\r\n            ).style.display == 'none'\r\n        ) {\r\n            document.querySelector(\r\n                '.answersTable tr:nth-child(' + Indx + ')'\r\n            ).style.display = 'none';\r\n        } //end of if\r\n    } //end of loop\r\n} //end of function hiding rows\r\n\r\nfunction populatGivenAns() {\r\n    if (myChosenAnswers == '') {\r\n        myChosenAnswers = clickedObjectContainer.querySelector('div').innerHTML;\r\n    }\r\n    givenAns.innerHTML = myChosenAnswers;\r\n}\r\n\r\n\r\n\r\n//adding other false random answers to binarArr\r\n// for (let j = 0; j < 5; j++) {\r\n//     let randNum = Math.floor(Math.random() * 256);\r\n//     console.log(randNum);\r\n//     binarArr.push(randNum);\r\n// }\r\n\r\nfunction shuffleArray(binarArr) {\r\n    for (var i = binarArr.length - 1; i > 0; i--) {\r\n        var j = Math.floor(Math.random() * (i + 1));\r\n        var temp = binarArr[i];\r\n        binarArr[i] = binarArr[j];\r\n        binarArr[j] = temp;\r\n    }\r\n    return binarArr;\r\n}\r\nvar newArray = shuffleArray(binarArr);\r\n// console.log(newArray);\r\n//*********************checking the shuffled array for empty elements\r\n// function testForempty(newArray) {\r\n//     return newArray != null;\r\n// }\r\n\r\n// console.log(newArray);\r\n/*********************************************End of random shuffling of the options**************/\r\n/*/\\/\\/\\/\\Checking the matching with correct answer/\\/\\/\\/\\*/\r\n\r\nfunction runToCheck() {\r\n    // let hidTable = document.querySelector('.answersTable').style.display = 'none';\r\n    //~~~~~~~~~~~~~~~~function definition for correct\r\n    let resultAns = document.getElementById('matchField');\r\n    function myFunctionCorrect() {\r\n        resultAns.innerHTML = 'Correct!';\r\n        document.body.style.backgroundColor = '#96E29A'; //color feedback correct\r\n        givenAns.style.color = '#22E02D';\r\n    } //end of function myFunctionCorrect\r\n    //~~~~~~~~~~~~~~~~function definition for False\r\n    function myFunctionFalse() {\r\n        //injecting a class for changing the color of the FALSE text to red\r\n        resultAns.innerHTML = 'False!';\r\n        document.body.style.backgroundColor = '#FF5760'; //color feedback correct\r\n        resultAns.style.color = '#FF0000';\r\n        if (myChosenAnswers == '') {\r\n            givenAns.innerHTML = `Correct answer is: ${noLeadBinary}, and you didn't choose an option`\r\n        } else {\r\n            givenAns.innerHTML = `Correct answer is: ${noLeadBinary}, You Chose ${myChosenAnswers}!`;\r\n        }\r\n    } //end of function myFunctionFalse\r\n    //~~~~~~~~~~~~~~~~Main condition~~~~~~~~~~~~~////////////////////////////////\r\n    let cmbAnsFieldContent = givenAns.innerText;\r\n    if (clickedObjectContainer != undefined) {\r\n        if (cmbAnsFieldContent == noLeadBinary) {\r\n            myFunctionCorrect();\r\n        } else {\r\n            myFunctionFalse();\r\n        }\r\n\r\n    } else {\r\n        myFunctionFalse();\r\n    }\r\n} //end of function runToCheck\r\n\r\n/*▐▐▐▐▐▐▐▐▐Assigning shuffled new array elements to HTML cells in the table▐▐▐▐▐▐▐▐▐▐▐*/\r\nfor (let q = 0; q < newArray.length; q++) {\r\n    var indexStr = String(q + 1);\r\n    // console.log(newArray.length);\r\n    indexStr = 'print_arr' + indexStr;\r\n    // console.log(indexStr);\r\n    document.getElementById(indexStr).innerHTML = newArray[q];\r\n\r\n}\r\n"]}