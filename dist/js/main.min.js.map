{"version":3,"sources":["main.js"],"names":["window","binarArr","noLeadBinary","addLeadinZero","resetWholeGeneration","location","reload","result","decimVal","leadingZero","floor","Math","random","binaryWithLeadingZero","getElementById","deimalVlaue","innerHTML","dec","toString","dec2bin","substr","length","push","console","randBinar","i","randBinaryGenerator","myChosenAnswers","givenAns","document","makeItHidden","clickedObjectContainer","display","tablRowCount","querySelector","rows","Indx","style","testForHidingRow","populatGivenAns","j","temp","newArray","t","timerNum","setInterval","clearInterval","myFunctionFalse","backgroundColor","resultAns","color","concat","cmbAnsFieldContent","innerText","undefined","body","q","indexStr"],"mappings":"aAAA,IACEA,OAGEC,cAIAC,aADAC,sBAPEC,qBAAuB,WAC3BJ,OAAOK,SAASC,UADlBL,SAAA,GAGIM,SAAJ,EAGIC,YAAJ,GAGAA,SAAIC,KAAWC,MAAf,IAAAC,KAAAC,UACA,IAAIC,YAAAA,SAAJC,eAAA,iBAEAN,YAAWG,UAAWA,SAEtBI,IAAAA,QAAYC,SAAAA,GACZ,OAAAC,EAAAC,SAAA,IACAhB,aAAgBiB,QAAVA,UACJjB,aAAWgB,WAAXE,OAAAlB,aAAAmB,QAAAnB,aAMFD,SAASqB,KAAKpB,cAHdA,IAWIqB,uBAXJrB,oBAA0BkB,WAE1BG,IAIE,IAAIC,EAJNC,EAAYvB,EAAAA,EAAAA,EAAZuB,IACAxB,EAAcC,KAAAA,MAAd,IAAAS,KAAAC,UAAAM,SAAA,GAMIM,EAAY,WAAWJ,OAAOI,EAAUH,QAAUG,EAJhDE,SAAAA,KAAAA,IAGFF,sBAmGC,IA/FF,IAAAG,gBAAA,GAPHC,SAAAC,SAAAf,eAAA,WAWAgB,aAAA,WACAC,uBAAIA,MAAJC,QAAA,QAEIJ,iBAAoBd,WAWtB,IAFA,IAAImB,EAAeJ,SAASK,cAAc,iBAAiBC,KAAKd,OAEvDe,EAAO,EAAGA,EAAOH,EAAe,EAAGG,IAL3C,QAFDP,SAAAK,cACAH,8BAAAK,EAAA,uBACCC,MAAAL,SAEsB,QAQnBH,SAASK,cACP,8BAAgCE,EAAO,uBATzCE,MAAAA,UAEJf,SAAYU,cAWN,8BAAgCG,EAAO,KAVxCC,MAAID,QAAUA,SAajBG,gBAAA,WAIqB,IAAnBZ,kBAHHA,gBAAAI,uBAAAG,cAAA,OAAAlB,WAMDY,SAASZ,UAAYW,iBAFnBA,aAAe,SAAGI,GACnB,IAAA,IAAAN,EAAAxB,EAAAoB,OAAA,EAAA,EAAAI,EAAAA,IAAA,CAMC,IAAIe,EAAI7B,KAAKD,MAAMC,KAAKC,UAAYa,EAAI,IAL1CG,EAASZ,EAAYW,GAJvB1B,EAAAwB,GAAAxB,EAAAuC,GAYIvC,EAASuC,GAAKC,EAJhB,OAAKxC,GAEHyC,SAAWzC,aAAXA,UAUJ0C,EAAA,EACAC,SAAAC,YAAA,WASMF,EAAI,IANVA,IAQId,SAASf,eAAe,eAAeE,UAAY2B,IAEnDG,cAAcF,UAEdf,SAASf,eAAe,eAAeE,UAAY,cATnD2B,SAAJT,cAAA,iBAAAG,MAAAL,QAAA,OACIY,SAAQ9B,eAAe,UAAAuB,MAAML,QAAA,UAE/B,KAEEH,WAASf,WAaXe,SAASf,eAAe,eAAeE,UAAY2B,EATjDd,cAASf,UACTe,IAAAA,EAASK,SAAcpB,eAAvB,cAMFiC,EAAA,WAEAlB,EAASf,UAAe,SACxBgC,SAAAA,KAAcF,MAADI,gBAAY,UAYvBC,EAAUZ,MAAMa,MAAQ,UAEtBtB,SAASZ,UAbYF,IAArBmC,gBAaA,sBAAAE,OAA2CjD,aAA3C,qCAXF+C,sBAAAA,OAAA/C,aAAA+C,gBAAAA,OAAAtB,gBAAAsB,MAGCG,EAAAxB,SAAAyB,UACHC,MAAAvB,wBAeMqB,GAAsBlD,cA7B3B+C,EAAAjC,UAAA,WACAa,SAZH0B,KAAAlB,MAAAW,gBAAA,UAaApB,SAAAS,MAAAa,MAAA,WAiCIH,KAfAS,EAEO,EAAAA,EAAAd,SAAArB,OAAAmC,IAAA,CACL5B,IAAAA,SAASZ,OAATwC,EAAA,GAEHC,SAAE,YAAAA,SAoBH5B,SAASf,eAAe2C,UAAUzC,UAAY0B,SAASc","file":"main.min.js","sourcesContent":["const resetWholeGeneration = () => {\r\n  window.location.reload();\r\n};\r\nlet result;\r\nlet binarArr = [];\r\n// let final = \"\";\r\nlet decimVal = 0;\r\nlet addLeadinZero;\r\nlet noLeadBinary;\r\nlet leadingZero = \"\";\r\nlet binaryWithLeadingZero;\r\n\r\ndecimVal = Math.floor(Math.random() * 256);\r\nlet deimalVlaue = document.getElementById(\"decimal-Value\");\r\ndeimalVlaue.innerHTML = decimVal;\r\n/********************************************************************************** */\r\nconst dec2bin = (dec) => {\r\n  return dec.toString(2);\r\n}; //doesnt show leadin zeros\r\nnoLeadBinary = dec2bin(decimVal);\r\nnoLeadBinary = \"00000000\".substr(noLeadBinary.length) + noLeadBinary;\r\n// console.log('the length is', noLeadBinary.length);\r\nconsole.log(noLeadBinary);\r\nbinarArr.push(noLeadBinary);\r\n\r\nconst randBinaryGenerator = () => {\r\n  let randBinar;\r\n  for (let i = 0; i < 5; i++) {\r\n    randBinar = Math.floor(Math.random() * 256).toString(2);\r\n    randBinar = \"00000000\".substr(randBinar.length) + randBinar;\r\n    binarArr.push(randBinar);\r\n    console.log(randBinar);\r\n  }\r\n};\r\nrandBinaryGenerator();\r\n\r\n/******************************************************************************************************************************************** */\r\nlet clickedObjectContainer;\r\nlet myChosenAnswers = \"\"; //variable for keeping concatenated words\r\nlet givenAns = document.getElementById(\"combAns\");\r\n//~~~~~~~~~~~~~~~~~asked question loop~~~~~~~~~~~~~~~~\r\n/*//////////FUNCTIONS/////////*/\r\nconst makeItHidden = () => {\r\n  //function for hidding the clicked cell table row\r\n  clickedObjectContainer.style.display = \"none\";\r\n}; //hiding\r\n\r\nconst testForHidingRow = () => {\r\n  let tablRowCount = document.querySelector(\".answersTable\").rows.length;\r\n  console.log(tablRowCount);\r\n  for (var Indx = 1; Indx < tablRowCount + 1; Indx++) {\r\n    if (\r\n      document.querySelector(\r\n        \".answersTable tr:nth-child(\" + Indx + \") td:nth-child(2)>a\"\r\n      ).style.display == \"none\" &&\r\n      document.querySelector(\r\n        \".answersTable tr:nth-child(\" + Indx + \") td:nth-child(3)>a\"\r\n      ).style.display == \"none\"\r\n    ) {\r\n      document.querySelector(\r\n        \".answersTable tr:nth-child(\" + Indx + \")\"\r\n      ).style.display = \"none\";\r\n    } //end of if\r\n  } //end of loop\r\n}; //end of function hiding rows\r\n\r\nconst populatGivenAns = () => {\r\n  if (myChosenAnswers == \"\") {\r\n    myChosenAnswers = clickedObjectContainer.querySelector(\"div\").innerHTML;\r\n  }\r\n  givenAns.innerHTML = myChosenAnswers;\r\n};\r\n\r\nconst shuffleArray = (binarArr) => {\r\n  for (var i = binarArr.length - 1; i > 0; i--) {\r\n    var j = Math.floor(Math.random() * (i + 1));\r\n    var temp = binarArr[i];\r\n    binarArr[i] = binarArr[j];\r\n    binarArr[j] = temp;\r\n  }\r\n  return binarArr;\r\n};\r\nvar newArray = shuffleArray(binarArr);\r\n// console.log(newArray);\r\n//*********************checking the shuffled array for empty elements\r\n// function testForempty(newArray) {\r\n//     return newArray != null;\r\n// }\r\n\r\n// console.log(newArray);\r\n/*********************************************End of random shuffling of the options**************/\r\n/*/\\/\\/\\/\\Checking the matching with correct answer/\\/\\/\\/\\*/\r\n/*******************timer*********************** */\r\nlet t = 0;\r\nlet timerNum = setInterval(() => {\r\n  //function for counting up to 30 seconds\r\n  if (t < 30) {\r\n    t++;\r\n    document.getElementById(\"timer-value\").innerHTML = t;\r\n  } else {\r\n    clearInterval(timerNum);\r\n    // console.log(`done!!`);\r\n    document.getElementById(\"timer-value\").innerHTML = \"Time is up!\";\r\n    document.querySelector(\".timer-wraper\").style.display = \"none\";\r\n    document.getElementById(\"timeUp\").style.display = \"block\";\r\n  }\r\n}, 1000);\r\n/*******************timer*********************** */\r\nconst runToCheck = () => {\r\n  // let hidTable = document.querySelector('.answersTable').style.display = 'none';\r\n  //~~~~~~~~~~~~~~~~function definition for correct\r\n  document.getElementById(\"timer-value\").innerHTML = t;\r\n  clearInterval(timerNum); //capturing the latest elapsed time\r\n  let resultAns = document.getElementById(\"matchField\");\r\n  const myFunctionCorrect = () => {\r\n    resultAns.innerHTML = \"Correct!\";\r\n    document.body.style.backgroundColor = \"#96E29A\"; //color feedback correct\r\n    givenAns.style.color = \"#22E02D\";\r\n  }; //end of function myFunctionCorrect\r\n  //~~~~~~~~~~~~~~~~function definition for False\r\n  const myFunctionFalse = () => {\r\n    //injecting a class for changing the color of the FALSE text to red\r\n    resultAns.innerHTML = \"False!\";\r\n    document.body.style.backgroundColor = \"#FF5760\"; //color feedback correct\r\n    resultAns.style.color = \"#FF0000\";\r\n    if (myChosenAnswers == \"\") {\r\n      givenAns.innerHTML = `Correct answer is: ${noLeadBinary}, and you didn't choose an option`;\r\n    } else {\r\n      givenAns.innerHTML = `Correct answer is: ${noLeadBinary}, You Chose ${myChosenAnswers}!`;\r\n    }\r\n  }; //end of function myFunctionFalse\r\n  //~~~~~~~~~~~~~~~~Main condition~~~~~~~~~~~~~////////////////////////////////\r\n  let cmbAnsFieldContent = givenAns.innerText;\r\n  if (clickedObjectContainer != undefined) {\r\n    if (cmbAnsFieldContent == noLeadBinary) {\r\n      myFunctionCorrect();\r\n    } else {\r\n      myFunctionFalse();\r\n    }\r\n  } else {\r\n    myFunctionFalse();\r\n  }\r\n}; //end of function runToCheck\r\n\r\n/*▐▐▐▐▐▐▐▐▐Assigning shuffled new array elements to HTML cells in the table▐▐▐▐▐▐▐▐▐▐▐*/\r\nfor (let q = 0; q < newArray.length; q++) {\r\n  var indexStr = String(q + 1);\r\n  // console.log(newArray.length);\r\n  indexStr = \"print_arr\" + indexStr;\r\n  // console.log(indexStr);\r\n  document.getElementById(indexStr).innerHTML = newArray[q];\r\n}\r\n"]}